{
    "sourceFile": "app/api/job/[id]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756289855602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756289855602,
            "name": "Commit-0",
            "content": "import prisma from \"@/lib/db\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nexport async function GET(req: NextRequest, {params}:{params: {id:string}}){\r\n    const {id} = params;\r\n    try {\r\n        const job = await prisma.jobs.findUnique({\r\n            where: {\r\n                id: Number(id)\r\n            }\r\n        })\r\n        if(job){\r\n            return NextResponse.json(job);\r\n        }else{\r\n            return NextResponse.json({error: \"Job not found\"},{status: 404});\r\n        }\r\n    } catch (error) {\r\n        return NextResponse.json({error: \"Field to fetch job\"},{status: 500});\r\n    }\r\n}\r\n\r\nexport async function PUT(req: Request, {params} : {params: {id: string}}){\r\n    const {id}  = params;\r\n    try {\r\n        const form = await req.formData();\r\n        const openDateStr = form.get(\"open_date\") as string;\r\n        const closeDateStr = form.get(\"close_date\") as string;\r\n        const open_date = new Date(openDateStr).toISOString();\r\n        const close_date = new Date(closeDateStr).toISOString();\r\n        const position_en = form.get('position_en') as string;\r\n        const position_km = form.get(\"position_km\") as string;\r\n        const department_en  = form.get(\"department_en\") as string;\r\n        const department_km = form.get(\"department_km\") as string;\r\n        const description_en = form.get(\"description_en\") as string;\r\n        const description_km = form.get(\"description_km\") as string;\r\n        const experiences_en = form.get(\"experiences_en\") as string;\r\n        const experiences_km = form.get(\"experiences_km\") as string;\r\n        const level_en = form.get(\"level_en\") as string;\r\n        const level_km = form.get(\"level_km\") as string;\r\n        const overview_en = form.get(\"overview_en\") as string;\r\n        const overview_km = form.get(\"overview_km\") as string;\r\n        const job_type_en = form.get(\"job_type_en\") as string;\r\n        const job_type_km = form.get(\"job_type_km\") as string;\r\n        const salary_en = form.get(\"salary_en\") as string;\r\n        const salary_km = form.get(\"salary_km\") as string;\r\n        const duties_en = form.get(\"duties_en\") as string;\r\n        const duties_km = form.get(\"duties_km\") as string;\r\n        const requirements_en = form.get(\"requirements_en\") as string;\r\n        const requirements_km = form.get(\"requirements_km\") as string;\r\n        const gender = form.get(\"gender\") as string;\r\n        const status = form.get('status') as string;\r\n\r\n        if(\r\n            !open_date ||\r\n            !close_date ||\r\n            !position_en ||\r\n            !position_km ||\r\n            !description_en ||\r\n            !description_km ||\r\n            !experiences_en ||\r\n            !experiences_km ||\r\n            !level_en ||\r\n            !overview_en ||\r\n            !overview_km ||\r\n            !job_type_en ||\r\n            !salary_en ||\r\n            !salary_km ||\r\n            !duties_en ||\r\n            !duties_km ||\r\n            !requirements_en ||\r\n            !requirements_km ||\r\n            !gender\r\n                ){\r\n                    return NextResponse.json({error: \"All fields are required\"},{status: 400})\r\n                }\r\n\r\n                const updateJob = await prisma.jobs.update({\r\n                    where:{ id: Number(id)},\r\n                    data: {\r\n                        open_date,\r\n                        close_date,\r\n                        position_en,\r\n                        position_km,\r\n                        description_en,\r\n                        description_km,\r\n                        department_en,\r\n                        department_km,\r\n                        experiences_en,\r\n                        experiences_km,\r\n                        level_en,\r\n                        overview_en,\r\n                        overview_km,\r\n                        job_type_en,\r\n                        salary_en,\r\n                        salary_km,\r\n                        duties_en,\r\n                        duties_km,\r\n                        requirements_en,\r\n                        requirements_km,\r\n                        gender,\r\n                        status,\r\n                        created_by: 1,\r\n                        updated_by: 1,\r\n                    },\r\n                });\r\n                return NextResponse.json(updateJob);\r\n    } catch (error) {\r\n        return NextResponse.json({error:\"Failed to update job\"},{status: 500});   \r\n    }\r\n}\r\n\r\nexport async function DELETE(req: Request, {params}: {params:{id: string}}){\r\n    const {id} = params;\r\n\r\n    try {\r\n        await prisma.applicants.deleteMany({\r\n            where: { job_id : Number(id) },\r\n          });\r\n        await prisma.jobs.delete({\r\n            where: {id: Number(id)},\r\n        });\r\n        return NextResponse.json({message: \"Job deleted_successfully\", success: true},{status: 200});\r\n    } catch (error) {\r\n        return NextResponse.json({error: \"Failed to delete job\"},{status: 500});\r\n    }\r\n}"
        }
    ]
}