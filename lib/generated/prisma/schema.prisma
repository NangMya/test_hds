generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  access Json
  users  users[] @relation("roleId")
}

model users {
  id                     Int          @id @default(autoincrement())
  name                   String?
  email                  String       @unique
  password               String
  two_factor_code        String?
  two_factor_code_expiry DateTime?
  is_two_factor_enabled  Boolean      @default(true)
  reset_token            String?
  reset_token_expiry     DateTime?
  role_id                Int?
  role                   roles?       @relation("roleId", fields: [role_id], references: [id])
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt
  created_Work           our_works[]  @relation("CreatedByUser")
  updated_Work           our_works[]  @relation("UpdatedByUser")
  created_Job            jobs[]       @relation("CreatedByUser")
  updated_Job            jobs[]       @relation("UpdatedByUser")
  updated_Applicant      applicants[] @relation("UpdatedByUser")
}

model messages {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String?
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model our_works {
  id          Int      @id @default(autoincrement())
  date        DateTime
  title       String
  description String
  challenges  String
  strategy    String
  takeaway    String
  image       String?
  created_by  Int
  updated_by  Int
  createdBy   users    @relation("CreatedByUser", fields: [created_by], references: [id])
  updatedBy   users    @relation("UpdatedByUser", fields: [updated_by], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model jobs {
  id           Int          @id @default(autoincrement())
  open_date    DateTime
  close_date   DateTime
  position     String
  department   String
  description  String
  experiences  String
  level        String
  overview     String
  job_type     String
  salary       String
  duties       String
  requirements String
  gender       String
  status       String       @default("open")
  created_by   Int
  updated_by   Int
  createdBy    users        @relation("CreatedByUser", fields: [created_by], references: [id])
  updatedBy    users        @relation("UpdatedByUser", fields: [updated_by], references: [id])
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  applicant    applicants[]
}

model applicants {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  phone           String
  address         String
  experience      String
  expected_salary String
  job_id          Int
  file            String
  job             jobs     @relation(fields: [job_id], references: [id])
  status          String   @default("pending")
  updated_by      Int
  updatedBy       users    @relation("UpdatedByUser", fields: [updated_by], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}
