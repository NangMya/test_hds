generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  access Json
  users  users[] @relation("roleId")
}

model users {
  id                     Int           @id @default(autoincrement())
  name                   String?
  email                  String        @unique
  password               String
  two_factor_code        String?
  two_factor_code_expiry DateTime?
  is_two_factor_enabled  Boolean       @default(true)
  reset_token            String?
  reset_token_expiry     DateTime?
  role_id                Int?
  role                   roles?        @relation("roleId", fields: [role_id], references: [id])
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  created_Work           our_works[]   @relation("UserCreatedWorks")
  updated_Work           our_works[]   @relation("UserUpdatedWorks")
  created_Job            jobs[]        @relation("UserCreatedJobs")
  updated_Job            jobs[]        @relation("UserUpdatedJobs")
  created_Info           infos[]       @relation("UserCreatedInfo")
  updated_Info           infos[]       @relation("UserUpdatedInfo")
  updated_Applicant      applicants[]  @relation("UserUpdatedApplicants")
  created_Client         clients[]     @relation("UserCreatedClient")
  updated_Client         clients[]     @relation("UserUpdatedClient")
  created_Department     departments[] @relation("UserCreatedDepartment")
  updated_Department     departments[] @relation("UserUpdatedDepartment")
  created_Member         members[]     @relation("UserCreatedMember")
  updated_Member         members[]     @relation("UserUpdatedMember")
}

model messages {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String?
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model our_works {
  id          Int      @id @default(autoincrement())
  date        DateTime
  title       String
  description String
  challenges  String
  strategy    String
  takeaway    String
  image       String?
  created_by  Int
  updated_by  Int
  createdBy   users    @relation("UserCreatedWorks", fields: [created_by], references: [id])
  updatedBy   users    @relation("UserUpdatedWorks", fields: [updated_by], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model jobs {
  id           Int          @id @default(autoincrement())
  open_date    DateTime
  close_date   DateTime
  position     String
  department   String
  description  String
  experiences  String
  level        String
  overview     String
  job_type     String
  salary       String
  duties       String
  requirements String
  gender       String
  status       String       @default("open")
  created_by   Int
  updated_by   Int
  createdBy    users        @relation("UserCreatedJobs", fields: [created_by], references: [id])
  updatedBy    users        @relation("UserUpdatedJobs", fields: [updated_by], references: [id])
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  applicant    applicants[]
}

model applicants {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  phone           String
  address         String
  experience      String
  expected_salary String
  job_id          Int
  file            String
  job             jobs     @relation(fields: [job_id], references: [id])
  status          String   @default("pending")
  updated_by      Int
  updatedBy       users    @relation("UserUpdatedApplicants", fields: [updated_by], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model infos {
  id            Int      @id @default(autoincrement())
  name          String
  email         String
  phone1        String
  phone2        String?
  address       String
  map           String?
  showreel_pc   String?
  showreel_mb   String?
  facebook_url  String?
  linkedin_url  String?
  instagram_url String?
  youtube_url   String?
  telegram_url  String?
  tiktok_url    String?
  created_by    Int
  updated_by    Int
  createdBy     users    @relation("UserCreatedInfo", fields: [created_by], references: [id])
  updatedBy     users    @relation("UserUpdatedInfo", fields: [updated_by], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model clients {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  logo       String
  created_by Int
  updated_by Int
  createdBy  users    @relation("UserCreatedClient", fields: [created_by], references: [id])
  updatedBy  users    @relation("UserUpdatedClient", fields: [updated_by], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model departments {
  id         Int       @id @default(autoincrement())
  name       String
  status     Int
  created_by Int
  updated_by Int
  createdBy  users     @relation("UserCreatedDepartment", fields: [created_by], references: [id])
  updatedBy  users     @relation("UserUpdatedDepartment", fields: [updated_by], references: [id])
  member     members[] @relation("DepartmentOfUser")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model members {
  id            Int         @id @default(autoincrement())
  name          String
  profile       String
  position      String
  department_id Int
  department  departments @relation("DepartmentOfUser", fields: [department_id], references: [id])
  created_by    Int
  updated_by    Int
  createdBy     users       @relation("UserCreatedMember", fields: [created_by], references: [id])
  updatedBy     users       @relation("UserUpdatedMember", fields: [updated_by], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}
